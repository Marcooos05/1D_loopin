module motherboard (
    input clk,  // clock
    input rst,  // reset
    input irq[4],
    input slowclk, 
    output id[32],
    output ia[32],
    output ma[32],  // ALU output / EA
    output mrd[32], // Mem[EA]
    output mwd[32], // RD2 output 
    output output_buffer[32],
    output input_buffer[32],
    output debug[4][16],
    output r0_p1_live[4],
    output r1_p2_live[4],
    output r2_p3_live[4],
    output r3_p4_live[4],
    output r4_location[8],
    output r5_rounds_ones[4],
    output r6_rounds_tens[4],
    input r8_p1_button,
    input r9_p2_button,
    input r10_p3_button,
    input r11_p4_button,
    
    input r8_p1_button_rise,
    input r9_p2_button_rise,
    input r10_p3_button_rise,
    input r11_p4_button_rise,
    input r12_start_button_rise,
    
    input player_rise[4],
    input player_fall[4],
    output output_led,
    output led_encode[32],
    output output_p1_led,
    output output_p2_led,
    output output_p3_led,
    output output_p4_led
    //output led_encode_p1[32]
  ) {

  // Beta CPU
  beta_cpu beta(.clk(clk));
  
  // setup and instantiate memory unit and instruction ROM
  const MEMORY_SIZE = 256;
  instruction_rom instruction_unit(#WORDS(MEMORY_SIZE));
  memory_unit memory_unit(#WORDS(MEMORY_SIZE), .clk(clk)); 
  
  // prepare output buffer
  dff system_output_buffer[32](.clk(clk), .rst(rst)); // 32 bit beta output buffer, hardwired to always read memory_unit value at byte address 0xC
  // prepare input buffer
  dff system_input_buffer[32](.clk(clk), .rst(rst)); // 32 bit beta input buffer, hardwired to always write memory_unit value at byte address 0x10
  
  // counter to write instructions from ROM to instruction memory
  dff writer_counter[$clog2(MEMORY_SIZE)](.clk(clk));
  fsm motherboard(.clk(clk)) = {INSTRUCTIONLOAD, RUN, LOAD_OUTPUT, DISPLAY_OUTPUT, UPDATE_INPUT};
  
  //wb2812 
  // We shall always assume that COLUMN_DIMENSION and ROW_DIMENSION is a 2^x
  const COLUMN_DIMENSION = 1; // how many "columns"? 
  const ROW_DIMENSION = 48; // how many "rows"?

  const PIXEL_COUNT = COLUMN_DIMENSION *  ROW_DIMENSION;   
  const ENCODING_AMOUNT = 8; // how many different encodings are used? 

  // ORANGE (111), SKY BLUE (110), PURPLE (101), YELLOW (100), BLUE (011), RED (010), GREEN (001), WHITE (000)
  const LEDCOLOR = {24h009AFF, 24hFFFF00, 24hFF00FF, 24h00FFFF, 24hFF0000, 24h0000FF, 24h00FF00, 24hFFFFFF}; 
  
  sig encoded_pixel_address[$clog2(PIXEL_COUNT)*$clog2(ENCODING_AMOUNT)];
  sig current_color_encoding[$clog2(ENCODING_AMOUNT)];
  
  var index;

  // observed output of the strip: (if matrix is used, this is the value of the top row or first row)
  // we will pump colors from right to left 
  // e.g.: ABCD ---> 16 bits color encoding, for 8 pixels
  // (connector) RED WHITE GREEN WHITE WHITE BLUE BLUE BLUE (end of strip)
  // another e.g: E is 1110 ---> 10 first (BLUE) then 11 (WHITE)
  // TODO: change this to suit your dimension
  
  
  
  dff led_encoding[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(0)); // 2 bit to encode a color per pixel
                                                                                                                                      //starting light display
  dff temp_encoding[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(4x{c{3x{3b111}, 3x{3b110}, 3x{3b101}, 3x{3b100}}})); // holds temporary value (double buffering)
  
  ws2812b_writer led_strip(#PIXEL_COUNT(PIXEL_COUNT), .clk(clk), .rst(rst)); 
  fsm state(.clk(clk), .rst(rst)) = {INIT, LOAD, IDLE};
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    //reset_conditioner reset_cond;
    counter delay(.rst(rst), #DIV(25));
  }
  
  player_led player_outled[4](#PIXELS(1), .clk(clk), .rst(rst));
  
  always {
    instruction_unit.addr = 0; // always set to 0 initially
    beta.irq = |irq; // IRQ as long as any of of the buttons[2:0] is pressed
    
    // store the button press to input buffer 
    if (|irq){
      if (irq[0]){
            system_input_buffer.d = 32hB0;
      }
      else if (irq[1]){
            system_input_buffer.d = 32hB1;
      }
      else if (irq[2]){
            system_input_buffer.d = 32hB2;
      }
    }
    
    beta.slowclk = slowclk; 
    beta.rst = rst;
  
    // connect memory unit with beta 
    beta.instruction = memory_unit.id;
    beta.mem_data_input = memory_unit.mrd;
    memory_unit.ia = beta.ia[31:0]; 
    memory_unit.wd = beta.mem_data_output; 
    memory_unit.we = beta.wr; 
    memory_unit.waddr = beta.mem_data_address[31:0]; 
    memory_unit.raddr = beta.mem_data_address[31:0]; 
    
    // turn off instruction loading
    memory_unit.instruction_write_enable = b0;
    memory_unit.instruction_towrite = 32b0; 
  
    // Load ROM instructions to RAM first, then run the Beta 
    case(motherboard.q){
        // instruction loading
        motherboard.INSTRUCTIONLOAD:
            beta.rst = 1;
            writer_counter.d = writer_counter.q + 1;
            instruction_unit.addr = writer_counter.q;
            memory_unit.instruction_towrite = instruction_unit.out;
            memory_unit.instruction_write_enable = b1;
            memory_unit.ia = writer_counter.q<<2; // pad with two zeroes to make it byte addressable because memory_unit expects byte addresing ia
            if ((writer_counter.q + 1) == MEMORY_SIZE){
                motherboard.d = motherboard.RUN; // wait one more clock cycle to allow the last instruction to be loaded before start execution
        }
        
        motherboard.RUN:
            // only load output and update input at the the beginning of each "next" instruction cycle 
            // LOAD_OUTPUT will hijack EA for 2 cycles. At this point, the CPU is not receiving a legitimate Mem[EA] if it is doing a LD/LDR 
            // However since "next" is more than 2 cycles, it will be fixed by the third cycle (actual EA coming out from beta is plugged into memory unit
            if (slowclk){
                motherboard.d = motherboard.LOAD_OUTPUT;
            }
            else{
                motherboard.d = motherboard.RUN;
            }
        
        motherboard.LOAD_OUTPUT:
            // load hardcoded byte address 32hC (12) for output 
            memory_unit.raddr = 32hC;
            motherboard.d = motherboard.DISPLAY_OUTPUT;
        
        motherboard.DISPLAY_OUTPUT:
            // display Mem[12] to beta_output_buffer for user to see
            system_output_buffer.d = memory_unit.mrd;
            motherboard.d = motherboard.UPDATE_INPUT;
        
        motherboard.UPDATE_INPUT:
            // always store hardcoded byte address 32h10 (16) for any incoming input each time "next" happens
            // need 2x original clock cycles for data to be readable at 32h10, plenty of time since "next" is more than 2 cycles
            memory_unit.waddr = 32h10;
            memory_unit.wd = system_input_buffer.q;
            memory_unit.we = 1;
            motherboard.d = motherboard.RUN;
    }
    
    // output values
    output_buffer = system_output_buffer.q;
    input_buffer = system_input_buffer.q;
    ia = beta.ia;
    id = memory_unit.id;
    ma = beta.mem_data_address;
    mrd = memory_unit.mrd;
    mwd = beta.mem_data_output;
    debug = beta.debug;
    
    
    //register data output 
    r0_p1_live = beta.r0_p1_live;
    r1_p2_live = beta.r1_p2_live;
    r2_p3_live = beta.r2_p3_live;
    r3_p4_live = beta.r3_p4_live;
    r4_location = beta.r4_location;
    r5_rounds_ones = beta.r5_rounds_ones;
    r6_rounds_tens = beta.r6_rounds_tens;
    
    //register data input
    beta.r8_p1_button = r8_p1_button;
    beta.r9_p2_button = r9_p2_button;
    beta.r10_p3_button = r10_p3_button;
    beta.r11_p4_button = r11_p4_button;
    
    beta.r8_p1_button_rise = r8_p1_button_rise;
    beta.r9_p2_button_rise = r9_p2_button_rise;
    beta.r10_p3_button_rise = r10_p3_button_rise;
    beta.r11_p4_button_rise = r11_p4_button_rise;
    beta.r12_start_button_rise = r12_start_button_rise;
    
    
    // LED Strip control
    led_strip.update = 0;
    led_strip.clear = 0;
    
    case (state.q){
      state.IDLE:
             if (beta.r18_change_loc){
                // ORANGE (111), SKY BLUE (110), PURPLE (101), YELLOW (100), BLUE (011), RED (010), GREEN (001), WHITE (000)
                case(beta.r4_location){
                  h00:temp_encoding.d = 48x{b000};
                  h01:temp_encoding.d = c{45x{b000}, 3x{b011}};
                  h02:temp_encoding.d = c{42x{b000}, 3x{b011}, 3x{b000}};
                  h03:temp_encoding.d = c{39x{b000}, 3x{b011}, 6x{b000}};
                  h04:temp_encoding.d = c{36x{b000}, 3x{b011}, 9x{b000}};
                  h05:temp_encoding.d = c{33x{b000}, 3x{b011}, 12x{b000}};
                  h06:temp_encoding.d = c{30x{b000}, 3x{b011}, 15x{b000}};
                  h07:temp_encoding.d = c{27x{b000}, 3x{b011}, 18x{b000}};
                  h08:temp_encoding.d = c{24x{b000}, 3x{b011}, 21x{b000}};
                  h09:temp_encoding.d = c{21x{b000}, 3x{b011}, 24x{b000}};
                  h0A:temp_encoding.d = c{18x{b000}, 3x{b011}, 27x{b000}};
                  h0B:temp_encoding.d = c{15x{b000}, 3x{b011}, 30x{b000}};
                  h0C:temp_encoding.d = c{12x{b000}, 3x{b011}, 33x{b000}};
                  h0D:temp_encoding.d = c{9x{b000}, 3x{b011}, 36x{b000}};
                  h0E:temp_encoding.d = c{6x{b000}, 3x{b011}, 39x{b000}};
                  h0F:temp_encoding.d = c{3x{b000}, 3x{b011}, 42x{b000}};
                  h10:temp_encoding.d = c{3x{b011}, 45x{b000}};
            
                  hE0:temp_encoding.d = 4x{c{3x{3b111}, 3x{3b110}, 3x{3b101}, 3x{3b100}}};
                  hF0:temp_encoding.d = 48x{b010};
                  hF1:temp_encoding.d = 48x{b100};
                  hF2:temp_encoding.d = 48x{b101};
                  hF3:temp_encoding.d = 48x{b110};
                  hF4:temp_encoding.d = 48x{b111};
                }
                state.d = state.LOAD;
              }
      
      state.INIT: 
           if (led_strip.reset & delay.value){ //  you need to artificially introduce some delay before sending data to the LED strip
               state.d = state.LOAD;
           }
        
      state.LOAD:
            // wait until we are at RESET state before we decide to refresh the screen
            if (led_strip.reset){
                // tell the LED to update the pixels
                led_strip.update = 1;
                led_encoding.d = temp_encoding.q;
                state.d = state.IDLE;
                
            }
    }
    
    
    // get current color encoding for this pixel
    encoded_pixel_address = led_strip.pixel_address * $clog2(ENCODING_AMOUNT);
    for (index=0; index<$clog2(ENCODING_AMOUNT); index++){
       current_color_encoding[index] = led_encoding.q[encoded_pixel_address+index];
    }
    
    // based on the encoding extracted from dff led_encoding, we get the 24bit color value
    led_encode = led_encoding.q[31:0];
    led_strip.color = LEDCOLOR[current_color_encoding]; 
    output_led = led_strip.led;
    
    
    //player 1-4 buttons led 
    player_outled.rise = player_rise;
    player_outled.fall = player_fall;
    player_outled.location = {beta.r4_location[7:0],beta.r4_location[7:0],beta.r4_location[7:0],beta.r4_location[7:0]};
    player_outled.live[0] = beta.r0_p1_live;
    player_outled.live[1] = beta.r1_p2_live;
    player_outled.live[2] = beta.r2_p3_live;
    player_outled.live[3] = beta.r3_p4_live;
    
    player_outled.colorbit[0] = b100;
    player_outled.colorbit[1] = b101;
    player_outled.colorbit[2] = b110;
    player_outled.colorbit[3] = b111;
    output_p1_led = player_outled.out[0];
    output_p2_led = player_outled.out[1];
    output_p3_led = player_outled.out[2];
    output_p4_led = player_outled.out[3];
  }
}
