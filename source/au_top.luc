module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [6],      // Digit select on IO Shield
    input io_button [6],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output outled,
    output outled_p1,
    output outled_p2,
    output outled_p3,
    output outled_p4
  ) {
  // helper signals
  sig rst;                  // reset signal
  sig next;                 // next instruction signal
  sig debug_pcsel[16];
  sig debug_asel[16];
  sig debug_bsel[16];
  sig debug_wdsel[16];

  // motherboard
  motherboard motherboard(.clk(clk), .rst(rst));
  
  // manual next button to advance one instruction
  dff next_button(.clk(clk));
  button_conditioner next_button_conditioner(.clk(clk));
  edge_detector next_button_edge(#RISE(1), #FALL(0), .clk(clk));
  
  // interrupt button conditioners, edge detector, and input buffer
  //button_conditioner interrupt_button_conditioner[4](.clk(clk));
  //edge_detector interrupt_button_edge[4](#RISE(1), #FALL(0), .clk(clk));
  
  button_conditioner player_button_conditioner[5](.clk(clk)); 
  edge_detector player_button_edge_rise[5](#RISE(1), #FALL(0), .clk(clk));
  edge_detector player_button_edge_fall[4](#RISE(0), #FALL(1), .clk(clk));

  // to run beta at slower clock than FPGA clock
  counter frequency_divider(#SIZE(28), .clk(clk), .rst(rst));
  edge_detector slowclock_edge(#RISE(1), #FALL(0), .clk(clk));
  edge_detector fastclock_edge(#RISE(1), #FALL(0), .clk(clk)); 
 
  // OTHERS (for debug)
  multi_seven_seg seg(.clk(clk),.rst(rst));
  reset_conditioner reset_cond(.clk(clk));
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    io_led = 3x{{h00}};       // turn all LED off at first
    usb_tx = usb_rx;          // loop serial port
    io_seg = 8hff; // connect segments to the driver
    io_sel = 4hf; // connect digit select to the driver

    
    led = c{3b0, io_button};  // connect buttons to LEDs
    io_led[2][7] = io_dip[2][7]; // see toggle manual/auto mode
    io_led[2][6] = io_dip[2][6]; // see toggle fastclock 
    io_led[2][5] = frequency_divider.value[27]; 
    io_led[2][4] = frequency_divider.value[25];  
    
    // next button
    next_button_conditioner.in = io_button[5];
    next_button_edge.in = next_button_conditioner.out;
    next_button.d = next_button_edge.out;
    
    // driving the beta 
    slowclock_edge.in = frequency_divider.value[27];
    case(io_dip[1]){
      h01: fastclock_edge.in = frequency_divider.value[16];
      h02: fastclock_edge.in = frequency_divider.value[15]; 
      h04: fastclock_edge.in = frequency_divider.value[14]; 
      h08: fastclock_edge.in = frequency_divider.value[20];
      
      default:
      fastclock_edge.in = frequency_divider.value[25];
    }
    // connect hardware interrupt button 
    //interrupt_button_conditioner.in = io_button[3:0];
    //interrupt_button_edge.in = interrupt_button_conditioner.out;
    
    //if (motherboard.r4_location == h01 || motherboard.r4_location == h02 || motherboard.r4_location == h03 || motherboard.r4_location == h04 || motherboard.r4_location ==h05 || motherboard.r4_location == h06 || motherboard.r4_location == h07 || motherboard.r4_location == h08 || motherboard.r4_location == h09 || motherboard.r4_location ==h0A || motherboard.r4_location == h0B || motherboard.r4_location == h0C || motherboard.r4_location == h0D || motherboard.r4_location == h0E || motherboard.r4_location == h0F || motherboard.r4_location == h10){
    //    motherboard.irq = interrupt_button_edge.out; // IRQ as long as any of the player buttons[3:0] is pressed
    //} else {
        motherboard.irq = 4b0;
    //}

    next = (slowclock_edge.out & io_dip[2][7]) | next_button.q; // proceed either when next button is pressed or io_dip[2][7] is 1

    if (io_dip[2][6]){ // want faster clock
     next = (fastclock_edge.out & io_dip[2][7]) | next_button.q; 
    }
    
    motherboard.slowclk = next;
    
    //led display
    io_led[1] = motherboard.led_encode[31:24];
    io_led[0] = motherboard.led_encode[23:16];
    outled = motherboard.output_led;
    outled_p1 = motherboard.output_p1_led;
    outled_p2 = motherboard.output_p2_led;
    outled_p3 = motherboard.output_p3_led;
    outled_p4 = motherboard.output_p4_led;
    
    // debugger to view Beta state    
    seg.values = {motherboard.r6_rounds_tens,motherboard.r5_rounds_ones,motherboard.r3_p4_live,motherboard.r2_p3_live,motherboard.r1_p2_live,motherboard.r0_p1_live};
    io_seg = seg.seg; //bit wise not function to view in io_shield, else seg.seg directly 
    io_sel = ~seg.sel; 
    
    //connect button inputs to register files
    player_button_conditioner.in = io_button[4:0];
       
    motherboard.r8_p1_button = player_button_conditioner.out[0];
    motherboard.r9_p2_button = player_button_conditioner.out[1];
    motherboard.r10_p3_button = player_button_conditioner.out[2];
    motherboard.r11_p4_button = player_button_conditioner.out[3];
    
    motherboard.r8_p1_button_rise = player_button_edge_rise.out[0];
    motherboard.r9_p2_button_rise = player_button_edge_rise.out[1];
    motherboard.r10_p3_button_rise = player_button_edge_rise.out[2];
    motherboard.r11_p4_button_rise = player_button_edge_rise.out[3];
    motherboard.r12_start_button_rise = player_button_edge_rise.out[4];
    
    player_button_edge_rise.in = player_button_conditioner.out;
    player_button_edge_fall.in = player_button_conditioner.out[3:0];
    motherboard.player_rise = player_button_edge_rise.out[3:0];
    motherboard.player_fall = player_button_edge_fall.out;
      
  debug_pcsel = motherboard.debug[0];
  debug_asel = motherboard.debug[1];
  debug_bsel = motherboard.debug[1];
  debug_wdsel = motherboard.debug[1];

  case (io_dip[0]){
    h01: // MSB 16 bits of current instruction (id[31:16])
      seg.values = {4b0,4b0,motherboard.id[31:28], motherboard.id[27:24], motherboard.id[23:20], motherboard.id[19:16]};
    h02: // LSB 16 bits of current instruction (id[15:0])
      seg.values = {4b0,4b0,motherboard.id[15:12], motherboard.id[11:8], motherboard.id[7:4], motherboard.id[3:0]}; 
    h03: // LSB 16 bits of EA (this is also ALU output) (ma[15:0])
      seg.values = {4b0,4b0,motherboard.ma[15:12], motherboard.ma[11:8],motherboard.ma[7:4], motherboard.ma[3:0]};
    h04: // MSB 16 bits of EA (this is also ALU output) (ma[31:16])
      seg.values = {4b0,4b0,motherboard.ma[31:28], motherboard.ma[27:24], motherboard.ma[23:20], motherboard.ma[19:16]}; 
    h05: // LSB 16 bits of instruction address (ia[15:0])
      io_led[0] = motherboard.ia[7:0];
      io_led[1] = motherboard.ia[15:8];
      seg.values = {4b0,4b0,motherboard.ia[15:12], motherboard.ia[11:8], motherboard.ia[7:4], motherboard.ia[3:0]};
        }
  }
}